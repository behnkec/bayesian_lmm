---
title: "Bayesian Linear Mixed Model for the ERP CORE data set"
format: html
editor: source
---

## Load packages and data set

```{r}
library(brms)
library(readr)
library(bayesplot)
library(ggplot2)
library(dplyr)
library(rstan)

options(mc.cores = 4)
```

```{r}
trials_erpcore <- read_csv("output_erpcore/trials.csv")
head(trials_erpcore)
```

Add column for face vs. car condition
```{r}
trials_cond <- trials_erpcore |>
  mutate(f_c = ifelse(value >= 41, "car", "face"))
head(trials_cond)
```

```{r}
# Check for normality of single trial averages
ggplot(trials_cond, aes(N170)) +
  geom_histogram(aes(y = ..density..), fill='lightgray', col='darkgrey') +
  stat_function(fun = dnorm, args = list(mean=mean(trials_cond$N170, na.rm = TRUE), sd=sd(trials_cond$N170, na.rm = TRUE)))
```


## Baysesian LMM with Priors
### Priors

```{r}
prior_01 <- c(prior(normal(0, 10), class = Intercept), # grand mean
              prior(normal(0, 10), class = b, coef = f_cface), # grand beta
              prior(normal(0, 50), class = sigma), # within person variation
              prior(normal(0, 20), class = sd, coef = Intercept, group = participant_id), # between person variation in mean 
              prior(normal(0, 20), class = sd, coef = f_cface, group = participant_id)) # between person variation in slope
```

```{r}
prior_02 <- c(prior(normal(0, 10), class = Intercept), # grand mean
              prior(normal(0, 5), class = b, coef = f_cface), # grand beta
              prior(normal(0, 50), class = sigma), # within person variation
              prior(normal(0, 10), class = sd, coef = Intercept, group = participant_id), # between person variation in mean 
              prior(normal(0, 10), class = sd, coef = f_cface, group = participant_id)) # between person variation in slope
```


### Model 1

```{r}
mod_erpcore_ri_rs_1 <- brm(N170 ~ 1 + f_c + (1 + f_c || participant_id),
                           data = trials_cond, 
                           prior = prior_01,
                           family = gaussian()) # default
```

```{r}
summary(mod_erpcore_ri_rs_1)
posterior_summary(mod_erpcore_cor_1)
# mcmc_dens gives density plots of posterior distribution
mcmc_dens(mod_erpcore_ri_rs_1, pars = variables(mod_erpcore_ri_rs_1)[1:5])

stanfit <- mod_erpcore_ri_rs_1$fit

# Plot traceplot including the warm-up phase
traceplot(stanfit, inc_warmup = TRUE, pars = variables(mod_erpcore_ri_rs_1)[1:5])
```

```{r}
mod_erpcore_ri_rs_2 <- brm(N170 ~ 1 + f_c + (1 + f_c || participant_id),
                           data = trials_cond, 
                           prior = prior_02,
                           family = gaussian()) # default
```

```{r}
summary(mod_erpcore_ri_rs_2)
# mcmc_dens gives density plots of posterior distribution
mcmc_dens(mod_erpcore_ri_rs_2, pars = variables(mod_erpcore_ri_rs_2)[1:5])
```

### Model with correlation

#### Prior

```{r}
prior_0cor <- c(prior(normal(0, 10), class = Intercept), # grand mean
                prior(normal(0, 10), class = b, coef = f_cface), # grand beta
                prior(normal(0, 50), class = sigma), # within person variation
                prior(normal(0, 20), class = sd, coef = Intercept, group = participant_id), # between person variation in mean 
                prior(normal(0, 20), class = sd, coef = f_cface, group = participant_id), # between person variation in slope
                prior(lkj(2), class = cor, group = participant_id)) # correlation between random intercept and random slope
```


#### Model

```{r}
mod_erpcore_ri_rs_cor <- brm(N170 ~ 1 + f_c + (1 + f_c | participant_id),
                           data = trials_cond, 
                           prior = prior_0cor,
                           family = gaussian()) # default
```

```{r}
summary(mod_erpcore_ri_rs_cor)
# mcmc_dens gives density plots of posterior distribution
mcmc_dens(mod_erpcore_ri_rs_cor, pars = variables(mod_erpcore_ri_rs_cor)[1:6])
```


### Distributional regression model

#### Prior

```{r}
prior_0dis <- c(prior(normal(0, 10), class = Intercept), # grand mean
                prior(normal(0, 10), class = b, coef = f_cface), # grand beta
                prior(normal(0, log(50)), class = Intercept, dpar = sigma),
                prior(normal(0, 5), class = sd, group = participant_id, dpar = sigma), 
                prior(normal(0, 20), class = sd, coef = Intercept, group = participant_id), # between person variation in mean 
                prior(normal(0, 20), class = sd, coef = f_cface, group = participant_id), # between person variation in slope
                prior(lkj(2), class = cor, group = participant_id)) # correlation between random intercept and random slope
```


#### Model

```{r}
mod_erpcore_ri_rs_dis <- brm(brmsformula(N170 ~ 1 + f_c + (1 + f_c | participant_id), sigma ~ 1 + (1 | participant_id)),
                             data = trials_cond, 
                             prior = prior_0dis,
                             family = gaussian()) # default
```

```{r}
summary(mod_erpcore_ri_rs_dis)
# mcmc_dens gives density plots of posterior distribution
mcmc_dens(mod_erpcore_ri_rs_dis, pars = variables(mod_erpcore_ri_rs_dis)[1:7])
```

## Prior predictive Checks

### No correlation modell

```{r}
mod_erpcore_prior_1 <- brm(N170 ~ 1 + f_c + (1 + f_c || participant_id),
                           data = trials_cond, 
                           prior = prior_01,
                           family = gaussian(),
                           sample_prior = "only") 
```

```{r}
pp_check(mod_erpcore_prior_1, ndraws = 15, type = "hist")
pp_check(mod_erpcore_prior_1, ndraws = 100, type = "stat", stat = "mean")

```


### Correlation Model

```{r}
mod_erpcore_prior_cor <- brm(N170 ~ 1 + f_c + (1 + f_c | participant_id),
                           data = trials_cond, 
                           prior = prior_0cor,
                           family = gaussian(),
                           sample_prior = "only") 
```

```{r}
summary(mod_erpcore_prior_cor)
plot(mod_erpcore_prior_cor)
```

```{r}
pp_check(mod_erpcore_prior_cor, ndraws = 11, type = "hist")
pp_check(mod_erpcore_prior_cor, ndraws = 100, type = "stat", stat = "mean")
pp_check(mod_erpcore_prior_cor, ndraws = 100, type = "stat", stat = "min")
pp_check(mod_erpcore_prior_cor, ndraws = 100, type = "stat", stat = "max")
```

### Distribuitonal Model

```{r}
mod_erpcore_prior_dis <- brm(brmsformula(N170 ~ 1 + f_c + (1 + f_c | participant_id), sigma ~ 1 + (1 | participant_id)),
                             data = trials_cond, 
                             prior = prior_0dis,
                             family = gaussian(),
                             sample_prior = "only")
```

```{r}
summary(mod_erpcore_prior_dis)
plot(mod_erpcore_prior_dis)
```

```{r}
pp_check(mod_erpcore_prior_dis, ndraws = 11, type = "hist")
pp_check(mod_erpcore_prior_dis, ndraws = 100, type = "stat", stat = "mean")
pp_check(mod_erpcore_prior_dis, ndraws = 100, type = "stat", stat = "min")
pp_check(mod_erpcore_prior_dis, ndraws = 100, type = "stat", stat = "max")
```

## Posterior predictive check

#### Model 1

```{r}
pp_check(mod_erpcore_ri_rs_1, ndraws = 11, type = "hist")
pp_check(mod_erpcore_ri_rs_1, ndraws = 100, type = "dens_overlay")
```

```{r}
pp_check(mod_erpcore_ri_rs_1,
          type = "dens_overlay_grouped",
          ndraws = 100,
          group = "participant_id")
```

```{r}
pp_check(mod_erpcore_ri_rs_1,
         type = "stat_grouped",
         ndraws = 1000,
         group = "participant_id",
         stat = "sd",
         facet_args = list(scales = "fixed"))
```

#### Distr Regression Model

```{r}
pp_check(mod_erpcore_ri_rs_dis, ndraws = 11, type = "hist")
pp_check(mod_erpcore_ri_rs_dis, ndraws = 100, type = "dens_overlay")
plot(mod_dist, nvariables = 6)
```


```{r}
pp_check(mod_erpcore_ri_rs_dis,
          type = "dens_overlay_grouped",
          ndraws = 100,
          group = "participant_id")
```

```{r}
pp_check(mod_erpcore_ri_rs_dis,
         type = "stat_grouped",
         ndraws = 1000,
         group = "participant_id",
         stat = "sd",
         facet_args = list(scales = "fixed"))
```


Model 5

```{r}
pp_check(mod_erpcore_ri_rs_2, ndraws = 11, type = "hist")
pp_check(mod_erpcore_ri_rs_2, ndraws = 100, type = "dens_overlay")
```

