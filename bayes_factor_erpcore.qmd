---
title: "Hypothesis testing (erpcore) with bridge sampling"
format: html
editor: visual
---

## Load packages and data set

```{r}
library(brms)
library(readr)
library(bayesplot)
library(ggplot2)
library(dplyr)
library(bridgesampling)
library(scales)
library(parallel)

options(mc.cores = 4)
```

```{r}
trials_erpcore <- read_csv("output_erpcore/trials.csv")
head(trials_erpcore)
```

Add column for face vs. car condition

```{r}
trials_cond <- trials_erpcore |>
  mutate(f_c = ifelse(value >= 41, "car", "face"))
head(trials_cond)
```

## Priors

### Model with correlation

```{r}
prior_0cor <- c(prior(normal(0, 10), class = Intercept), # grand mean
                prior(normal(0, 10), class = b, coef = f_cface), # grand beta
                prior(normal(0, 50), class = sigma), # within person variation
                prior(normal(0, 20), class = sd, coef = Intercept, group = participant_id), # between person variation in mean 
                prior(normal(0, 20), class = sd, coef = f_cface, group = participant_id), # between person variation in slope
                prior(lkj(2), class = cor, group = participant_id)) # correlation between random intercept and random slope
```

### Distributional Regression Model

```{r}
prior_0dis <- c(prior(normal(0, 10), class = Intercept), # grand mean
                prior(normal(0, 10), class = b, coef = f_cface), # grand beta
                prior(normal(0, log(50)), class = Intercept, dpar = sigma),
                prior(normal(0, 5), class = sd, group = participant_id, dpar = sigma), 
                prior(normal(0, 20), class = sd, coef = Intercept, group = participant_id), # between person variation in mean 
                prior(normal(0, 20), class = sd, coef = f_cface, group = participant_id), # between person variation in slope
                prior(lkj(2), class = cor, group = participant_id)) # correlation between random intercept and random slope
```

## Fit model

### Model with correlation

Model 1

```{r}
mod_erpcore_cor_bf_1 <- brm(N170 ~ 1 + f_c + (1 + f_c | participant_id),
                            data = trials_cond, 
                            prior = prior_0cor,
                            warmup = 2000,
                            iter = 20000,
                            control = list(adapt_delta = 0.9), # ensure that the posterior sampler is working correctly
                            save_pars = save_pars(all = TRUE), # precondition for performing bridge sampling
                            family = gaussian())
```

Warning: There were 5 transitions after warmup that exceeded the maximum treedepth. Increase max_treedepth above 10. See https://mc-stan.org/misc/warnings.html#maximum-treedepth-exceeded Warning: Examine the pairs() plot to diagnose sampling problems

--\> just an efficiency concern

```{r}
summary(mod_erpcore_cor_bf_1)
# mcmc_dens gives density plots of posterior distribution
mcmc_dens(mod_erpcore_cor_bf_1, pars = variables(mod_erpcore_cor_bf_1)[1:6])
```

Model 0 (without fixed effect of faces vs. cars)

```{r}
mod_erpcore_cor_bf_0 <- brm(N170 ~ 1 + (1 + f_c | participant_id),
                            data = trials_cond, 
                            prior = prior_0cor[prior_0cor$class != "b", ],
                            warmup = 2000,
                            iter = 20000,
                            control = list(adapt_delta = 0.9), # ensure that the posterior sampler is working correctly
                            save_pars = save_pars(all = TRUE), # precondition for performing bridge sampling
                            family = gaussian())
```

Compute marginal log likelihood

```{r}
margLogLik_linear <- bridge_sampler(mod_erpcore_cor_bf_1, silent = TRUE)
margLogLik_null <- bridge_sampler(mod_erpcore_cor_bf_0, silent = TRUE)
```

Compute Bayes Factor

```{r}
(BF_cor <- bayes_factor(margLogLik_linear, margLogLik_null))
```

Prior for b N(0,10) -\> Estimated Bayes factor in favor of x1 over x2: 5984.05981 Prior for b N(0,10) -\> Estimated Bayes factor in favor of x1 over x2: 6027.14818

### Distributional model

```{r}
mod_erpcore_dis_bf <- brm(brmsformula(N170 ~ 1 + f_c + (1 + f_c | participant_id), sigma ~ 1 + (1 | participant_id)),
                          data = trials_cond, 
                          prior = prior_0dis,
                          family = gaussian()) 
```

Model 1

```{r}
mod_erpcore_dis_bf_1 <- brm(brmsformula(N170 ~ 1 + f_c + (1 + f_c | participant_id), sigma ~ 1 + (1 | participant_id)),
                            data = trials_cond, 
                            prior = prior_0dis,
                            warmup = 2000,
                            iter = 20000,
                            control = list(adapt_delta = 0.9), # ensure that the posterior sampler is working correctly
                            save_pars = save_pars(all = TRUE), # precondition for performing bridge sampling
                            family = gaussian())
```

```{r}
summary(mod_erpcore_cor_bf)
# mcmc_dens gives density plots of posterior distribution
mcmc_dens(mod_erpcore_cor_bf, pars = variables(mod_erpcore_cor_bf)[1:6])
```

Model 0 (without fixed effect of faces vs. cars)

```{r}
mod_erpcore_dis_bf_0 <- brm(brmsformula(N170 ~ 1 + f_c + (1 + f_c | participant_id), sigma ~ 1 + (1 | participant_id)),
                            data = trials_cond, 
                            prior = prior_0dis[prior_0dis$class != "b", ],
                            warmup = 2000,
                            iter = 20000,
                            control = list(adapt_delta = 0.9), # ensure that the posterior sampler is working correctly
                            save_pars = save_pars(all = TRUE), # precondition for performing bridge sampling
                            family = gaussian())
```

Compute marginal log likelihood

```{r}
margLogLik_linear_dis <- bridge_sampler(mod_erpcore_dis_bf_1, silent = TRUE)
margLogLik_null_dis <- bridge_sampler(mod_erpcore_dis_bf_0, silent = TRUE)
```

Compute Bayes Factor

```{r}
(BF_dis <- bayes_factor(margLogLik_linear_dis, margLogLik_null_dis))
```

Prior for b N(0,10) -\> Estimated Bayes factor in favor of x1 over x2: 0.03914

## Sensitivity Analysis for correlation model

Null Model

```{r}
mod_erpcore_cor_bf_0_1 <- brm(N170 ~ 1 + (1 + f_c | participant_id),
                             data = trials_cond, 
                             prior = c(prior(normal(0, 10), class = Intercept),
                                       prior(normal(0, 50), class = sigma),
                                       prior(normal(0, 20), class = sd, coef = Intercept, group = participant_id),  
                                       prior(normal(0, 20), class = sd, coef = f_cface, group = participant_id), 
                                       prior(lkj(2), class = cor, group = participant_id)),
                             warmup = 2000,
                             iter = 20000,
                             control = list(adapt_delta = 0.9), # ensure that the posterior sampler is working correctly
                             save_pars = save_pars(all = TRUE), # precondition for performing bridge sampling
                             family = gaussian())

mLL_null_cor_1 <- bridge_sampler(mod_erpcore_cor_bf_0_1, silent = TRUE)

mod_erpcore_cor_bf_0_2 <- brm(N170 ~ 1 + (1 + f_c | participant_id),
                              data = trials_cond, 
                              prior = c(prior(normal(0, 20), class = Intercept),
                                        prior(normal(0, 50), class = sigma),
                                        prior(normal(0, 40), class = sd, coef = Intercept, group = participant_id),  
                                        prior(normal(0, 40), class = sd, coef = f_cface, group = participant_id), 
                                        prior(lkj(1), class = cor, group = participant_id)),
                              warmup = 2000,
                              iter = 20000,
                              control = list(adapt_delta = 0.9), # ensure that the posterior sampler is working correctly
                              save_pars = save_pars(all = TRUE), # precondition for performing bridge sampling
                              family = gaussian())

mLL_null_cor_2 <- bridge_sampler(mod_erpcore_cor_bf_0_2, silent = TRUE)

```

```{r}
prior_b_sd <- c(1, 1.5, 2, 2.5, 5, 8, 10, 15, 20, 40, 50, 100)

BF_cor_1 <- c()
BF_cor_2 <- c()

fit_model_bf <- function(pbsd) {
  
  print(paste("Fitting model for prior", pbsd))
  
  mod_cor_1 <- brm(N170 ~ 1 + f_c + (1 + f_c | participant_id),
                   data = trials_cond, 
                   prior = c(prior(normal(0, 10), class = Intercept),
                             set_prior(paste0("normal(0,", pbsd, ")"), class = "b", coef = "f_cface"),
                             prior(normal(0, 50), class = sigma), 
                             prior(normal(0, 20), class = sd, coef = Intercept, group = participant_id),  
                             prior(normal(0, 20), class = sd, coef = f_cface, group = participant_id), 
                             prior(lkj(2), class = cor, group = participant_id)),
                   warmup = 2000,
                   iter = 20000,
                   cores = 1, # within-chain parallelization: CPU_tot = cores * chains
                   control = list(adapt_delta = 0.9), # ensure that the posterior sampler is working correctly
                   save_pars = save_pars(all = TRUE),# precondition for performing bridge sampling
                   family = gaussian())
  
  mLL_linear_cor_1 <- bridge_sampler(mod_cor_1, silent = TRUE)
  
  BF_cor_1 <- c(BF_cor_1, bayes_factor(mLL_linear_cor_1, mLL_null_cor_1)$bf)
  
  return(BF_cor_1)
}

tic()
BF_par <- mclapply(c(1,2), fit_model_bf, mc.cores = 2)
toc()

tic()
BF <- lapply(c(1,2), fit_model_bf)
toc()

cl <- makeCluster(2)

mclapply(c(1,2), print, mc.cores=2)

```

```{r}
for (i in 1:length(prior_b_sd)) {
  
  pbsd <- prior_b_sd[i]
  
  mod_cor_2 <- brm(N170 ~ 1 + f_c + (1 + f_c | participant_id),
                   data = trials_cond, 
                   prior = c(prior(normal(0, 20), class = Intercept),
                             set_prior(paste0("normal(0,", pbsd, ")"), class = b, coef = f_cface),
                             prior(normal(0, log(100)), class = Intercept, dpar = sigma),
                             prior(normal(0, 10), class = sd, group = participant_id, dpar = sigma), 
                             prior(normal(0, 40), class = sd, coef = Intercept, group = participant_id),  
                             prior(normal(0, 40), class = sd, coef = f_cface, group = participant_id), 
                             prior(lkj(1), class = cor, group = participant_id)),
                   warmup = 2000,
                   iter = 20000,
                   cores = 4, # within-chain parallelization: CPU_tot = cores * chains
                   control = list(adapt_delta = 0.9), # ensure that the posterior sampler is working correctly
                   save_pars = save_pars(all = TRUE), # precondition for performing bridge sampling
                   family = gaussian())
  
  mLL_linear_cor_2 <- bridge_sampler(mod_cor_2, silent = TRUE)
  
  BF_cor_2 <- c(BF_cor_2, bayes_factor(mLL_linear_cor_2, mLL_null_cor_2)$bf)
}


BFs_cor <- tibble::tibble(beta_sd = rep(prior_b_sd, 2), BF_cor = c(BF_cor_1, BF_cor_2), 
                          Prior = rep(c("Prior1", "Prior2"), each = length(prior_b_sd)))
```

### Plot

```{r}
label_format <- function(x) {
  sapply(x, function(value) {
    if (value < 1) {
      return(paste0("1/", format(1 / value, digits = 2)))
    } else {
      return(as.character(value))
    }
  })
}
# Annahmen für die Priors und den Bayes-Faktor (Beispielwerte)
#priors <- c(0.01, 0.1, 0.5, 1, 2, 5, 10, 15)
#bayes_factor <- c(0.1, 0.5, 1, 5, 10, 50, 100, 6000)
#bayes_factor_2 <- c(40, 50, 60, 2000, 4, 5, 20, 100)

# Erstelle einen Tibble mit den Daten
#BFs <- tibble::tibble(beta_sd = rep(priors, 2), BF = c(bayes_factor, bayes_factor_2), 
#                      Prior = rep(c("Prior1", "Prior2"), each = length(priors)))

# Erstelle den Plot mit ggplot2
plot_cor <- ggplot(BFs_cor, aes(x = beta_sd, y = BF_cor, color = Prior)) +
  geom_line() +  # Linie zeichnen
  geom_point() +
  scale_y_log10(
    limits = c(0.01, max(BFs_cor$BF_cor)),  # Begrenzung der y-Achse
    breaks = c(0.01, 1/30, 0.1, 1/3, 1, 3, 10, 30, 100, 1000, 10000),  # Achsenbeschriftungen
    labels = label_format
  ) +  # Logarithmische y-Achse
  labs(x = "SD of beta", y = "Bayes Factor", title = "Bayes Factor in Abhängigkeit vom Prior für beta") +
  theme_bw() + 
  geom_hline(yintercept = 1, linetype = "dashed", size = 1) +
  scale_color_manual(values = c("Prior 1" = "blue", "Prior 2" = "red"))

# Zeige den Plot an
print(plot_cor)

```

## Sensitivity Analysis for distributional model

Null Model

```{r}
mod_erpcore_dis_bf_0_1 <- brm(brmsformula(N170 ~ 1 + (1 + f_c | participant_id), sigma ~ 1 + (1 | participant_id)),
                             data = trials_cond, 
                             prior = c(prior(normal(0, 10), class = Intercept),
                                       prior(normal(0, log(50)), class = Intercept, dpar = sigma),
                                       prior(normal(0, 5), class = sd, group = participant_id, dpar = sigma), 
                                       prior(normal(0, 20), class = sd, coef = Intercept, group = participant_id),  
                                       prior(normal(0, 20), class = sd, coef = f_cface, group = participant_id), 
                                       prior(lkj(2), class = cor, group = participant_id)),
                             warmup = 2000,
                             iter = 20000,
                             control = list(adapt_delta = 0.9), # ensure that the posterior sampler is working correctly
                             save_pars = save_pars(all = TRUE), # precondition for performing bridge sampling
                             family = gaussian())

mLL_null_dis_1 <- bridge_sampler(mod_erpcore_dis_bf_0_1, silent = TRUE)

mod_erpcore_dis_bf_0_2 <- brm(brmsformula(N170 ~ 1 + (1 + f_c | participant_id), sigma ~ 1 + (1 | participant_id)),
                              data = trials_cond, 
                              prior = c(prior(normal(0, 20), class = Intercept),
                                        prior(normal(0, log(100)), class = Intercept, dpar = sigma),
                                        prior(normal(0, 10), class = sd, group = participant_id, dpar = sigma), 
                                        prior(normal(0, 40), class = sd, coef = Intercept, group = participant_id),  
                                        prior(normal(0, 40), class = sd, coef = f_cface, group = participant_id), 
                                        prior(lkj(1), class = cor, group = participant_id)),
                              warmup = 2000,
                              iter = 20000,
                              control = list(adapt_delta = 0.9), # ensure that the posterior sampler is working correctly
                              save_pars = save_pars(all = TRUE), # precondition for performing bridge sampling
                              family = gaussian())

mLL_null_dis_2 <- bridge_sampler(mod_erpcore_dis_bf_0_2, silent = TRUE)

```

```{r}
prior_b_sd <- c(1, 1.5, 2, 2.5, 5, 8, 10, 15, 20, 40, 50, 100)

BF_dis_1 <- c()
BF_dis_2 <- c()

for (i in 1:length(prior_b_sd)) {
  
  pbsd <- prior_b_sd[i]
  
  mod_dis_1 <- brm(brmsformula(N170 ~ 1 + f_c + (1 + f_c | participant_id), sigma ~ 1 + (1 | participant_id)),
                   data = trials_cond, 
                   prior = c(prior(normal(0, 10), class = Intercept),
                             set_prior(paste0("normal(0,", pbsd, ")"), class = b, coef = f_cface),
                             prior(normal(0, log(50)), class = Intercept, dpar = sigma),
                             prior(normal(0, 5), class = sd, group = participant_id, dpar = sigma), 
                             prior(normal(0, 20), class = sd, coef = Intercept, group = participant_id),  
                             prior(normal(0, 20), class = sd, coef = f_cface, group = participant_id), 
                             prior(lkj(2), class = cor, group = participant_id)),
                   warmup = 2000,
                   iter = 20000,
                   cores = 1, # within-chain parallelization: CPU_tot = cores * chains
                   control = list(adapt_delta = 0.9), # ensure that the posterior sampler is working correctly
                   save_pars = save_pars(all = TRUE), # precondition for performing bridge sampling
                   family = gaussian())
  
  mLL_linear_dis_1 <- bridge_sampler(mod_dis_1, silent = TRUE)
  
  BF_dis_1 <- c(BF_dis_1, bayes_factor(mLL_linear_dis_1, mLL_null_dis_1)$bf)
}

for (i in 1:length(prior_b_sd)) {
  
  pbsd <- prior_b_sd[i]
  
  mod_dis_2 <- brm(brmsformula(N170 ~ 1 + f_c + (1 + f_c | participant_id), sigma ~ 1 + (1 | participant_id)),
                   data = trials_cond, 
                   prior = c(prior(normal(0, 20), class = Intercept),
                             set_prior(paste0("normal(0,", pbsd, ")"), class = b, coef = f_cface),
                             prior(normal(0, log(100)), class = Intercept, dpar = sigma),
                             prior(normal(0, 10), class = sd, group = participant_id, dpar = sigma), 
                             prior(normal(0, 40), class = sd, coef = Intercept, group = participant_id),  
                             prior(normal(0, 40), class = sd, coef = f_cface, group = participant_id), 
                             prior(lkj(1), class = cor, group = participant_id)),
                   warmup = 2000,
                   iter = 20000,
                   cores = 1, # within-chain parallelization: CPU_tot = cores * chains
                   control = list(adapt_delta = 0.9), # ensure that the posterior sampler is working correctly
                   save_pars = save_pars(all = TRUE), # precondition for performing bridge sampling
                   family = gaussian())
  
  mLL_linear_dis_2 <- bridge_sampler(mod_dis_2, silent = TRUE)
  
  BF_dis_2 <- c(BF_dis_2, bayes_factor(mLL_linear_dis_2, mLL_null_dis_2)$bf)
}


BFs_dis <- tibble::tibble(beta_sd = rep(prior_b_sd, 2), BF_dis = c(BF_dis_1, BF_dis_2), 
                          Prior = rep(c("Prior1", "Prior2"), each = length(prior_b_sd)))
```

### Plot

```{r}
label_format <- function(x) {
  sapply(x, function(value) {
    if (value < 1) {
      return(paste0("1/", format(1 / value, digits = 2)))
    } else {
      return(as.character(value))
    }
  })
}
# Annahmen für die Priors und den Bayes-Faktor (Beispielwerte)
#priors <- c(0.01, 0.1, 0.5, 1, 2, 5, 10, 15)
#bayes_factor <- c(0.1, 0.5, 1, 5, 10, 50, 100, 6000)
#bayes_factor_2 <- c(40, 50, 60, 2000, 4, 5, 20, 100)

# Erstelle einen Tibble mit den Daten
#BFs <- tibble::tibble(beta_sd = rep(priors, 2), BF = c(bayes_factor, bayes_factor_2), 
#                      Prior = rep(c("Prior1", "Prior2"), each = length(priors)))

# Erstelle den Plot mit ggplot2
plot_dis <- ggplot(BFs_dis, aes(x = beta_sd, y = BF_dis, color = Prior)) +
  geom_line() +  # Linie zeichnen
  geom_point() +
  scale_y_log10(
    limits = c(0.01, max(BFs_dis$BF_dis)),  # Begrenzung der y-Achse
    breaks = c(0.01, 1/30, 0.1, 1/3, 1, 3, 10, 30, 100, 1000, 10000),  # Achsenbeschriftungen
    labels = label_format
  ) +  # Logarithmische y-Achse
  labs(x = "SD of beta", y = "Bayes Factor", title = "Bayes Factor in Abhängigkeit vom Prior für beta") +
  theme_bw() + 
  geom_hline(yintercept = 1, linetype = "dashed", size = 1) +
  scale_color_manual(values = c("Prior1" = "blue", "Prior2" = "red"))

# Zeige den Plot an
print(plot_dis)

```
